### YamlMime:YamlDocument
documentType: Tutorial
title: Excel add-in tutorial
metadata:
  title: Excel add-in tutorial
  description: In this tutorial, you'll build an Excel add-in that creates, populates, filters, and sorts a table, creates a chart, freezes a table header, and protects a worksheet.
  audience: Developer
  level: Beginner
  displayType: one-column
items:
- durationInMinutes: 1
  content: |
    This tutorial teaches you how to build an Excel add-in that interacts with tables, charts, and worksheets in an Excel workbook. In the first step of the tutorial, you'll build an Excel add-in that creates and populates a table. In each subsequent step, you'll add more functionality to the add-in.

- title: Create a table
  durationInMinutes: 10
  content: |
    > [!NOTE]
    > If you haven't already, please read [Excel add-in quickstart that uses jQuery](../quickstarts/excel-quickstart-jquery.md). In particular, be sure that you know how to sideload an Excel add-in for testing.

    This first tutorial shows you how to programmatically add a table to a worksheet, populate the table with data, and then format it. It also shows you how to test that your add-in supports the user's current version of Excel.

    ## Prerequisites

    To use this tutorial, you need to have the following installed. 

    - Excel 2016, version 1711 (Build 8730.1000 Click-to-Run) or later. You might need to be an Office Insider to get this version. For more information, see [Be an Office Insider](https://products.office.com/en-us/office-insider?tab=tab-1).
    - [Node and npm](https://nodejs.org/en/) 
    - [Git Bash](https://git-scm.com/downloads) (Or another git client.)

    ## Setup

    1. Clone the repo [Excel Add-in Tutorial](https://github.com/OfficeDev/Excel-Add-in-Tutorial).
    2. Open a Git bash window, or Node.JS-enabled system prompt, and navigate to the **Start** folder of the project.
    3. Run the command `npm install` to install the tools and libraries listed in the package.json file. 

    ## Code the add-in

    1. Open the project in your code editor. 
    2. Open the file index.html.
    3. Replace the `TODO1` with the following markup:

        ```html
        <button class="ms-Button" id="create-table">Create Table</button>
        ```

    4. Open the app.js file.
    5. Replace the `TODO1` with the following code. This code determines whether the user's version of Excel supports a version of Excel.js that includes all the APIs that this series of tutorials will use. In a production add-in, use the body of the conditional block to hide or disable the UI that would call unsupported APIs. This will enable the user to still make use of the parts of the add-in that are supported by their version of Excel.

        ```js
        if (!Office.context.requirements.isSetSupported('ExcelApi', 1.7)) {
            console.log('Sorry. The tutorial add-in uses Excel.js APIs that are not available in your version of Office.');
        } 
        ```

    6. Replace the `TODO2` with the following code:

        ```js
        $('#create-table').click(createTable);
        ```

    7. Replace the `TODO3` with the following code. Note the following:
      - Your Excel.js business logic will be added to the function that is passed to `Excel.run`. This logic does not execute immediately. Instead, it is added to a queue of pending commands.
      - The `context.sync` method sends all queued commands to Excel for execution.
      - The `Excel.run` is followed by a `catch` block. This is a best practice that you should always follow. 

        ```js
        function createTable() {
            Excel.run(function (context) {
                
                // TODO4: Queue table creation logic here.

                // TODO5: Queue commands to populate the table with data.

                // TODO6: Queue commands to format the table.

                return context.sync();
            })
            .catch(function (error) {
                console.log("Error: " + error);
                if (error instanceof OfficeExtension.Error) {
                    console.log("Debug info: " + JSON.stringify(error.debugInfo));
                }
            });
        }
        ``` 

    8. Replace `TODO4` with the following code. Note:
      - The code creates a table by using `add` method of a worksheet's table collection, which always exists even if it is empty. This is the standard way that Excel.js objects are created. There are no class constructor APIs, and you never use a `new` operator to create an Excel object. Instead, you add to a parent collection object. 
      - The first parameter of the `add` method is the range of only the top row of the table, not the entire range the table will ultimately use. This is because when the add-in populates the data rows (in the next step), it will add new rows to the table instead of writing values to the cells of existing rows. This is a more common pattern because the number of rows that a table will have is often not known when the table is created. 
      - Table names must be unique across the entire workbook, not just the worksheet.

        ```js
        const currentWorksheet = context.workbook.worksheets.getActiveWorksheet();
        const expensesTable = currentWorksheet.tables.add("A1:D1", true /*hasHeaders*/);
        expensesTable.name = "ExpensesTable";
        ``` 

    9. Replace `TODO5` with the following code. Note:
      - The cell values of a range are set with an array of arrays.
      - New rows are created in a table by calling the `add` method of the table's row collection. You can add multiple rows in a single call of `add` by including multiple cell value arrays in the parent array that is passed as the second parameter.

        ```js
        expensesTable.getHeaderRowRange().values = 
            [["Date", "Merchant", "Category", "Amount"]];

        expensesTable.rows.add(null /*add at the end*/, [
            ["1/1/2017", "The Phone Company", "Communications", "120"],
            ["1/2/2017", "Northwind Electric Cars", "Transportation", "142.33"],
            ["1/5/2017", "Best For You Organics Company", "Groceries", "27.9"],
            ["1/10/2017", "Coho Vineyard", "Restaurant", "33"],
            ["1/11/2017", "Bellows College", "Education", "350.1"],
            ["1/15/2017", "Trey Research", "Other", "135"],
            ["1/15/2017", "Best For You Organics Company", "Groceries", "97.88"]
        ]);
        ``` 

    10. Replace `TODO6` with the following code. Note:
      - The code gets a reference to the **Amount** column by passing its zero-based index to the `getItemAt` method of the table's column collection. 

        > [!NOTE]
        > Excel.js collection objects, such as `TableCollection`, `WorksheetCollection`, and `TableColumnCollection` have an `items` property that is an array of the child object types, such as `Table` or `Worksheet` or `TableColumn`; but a `*Collection` object is not itself an array.

      - The code then formats the range of the **Amount** column as Euros to the second decimal. 
      - Finally, it ensures that the width of the columns and height of the rows is big enough to fit the longest (or tallest) data item. Notice that the code must get `Range` objects to format. `TableColumn` and `TableRow` objects do not have format properties.

            ```js
            expensesTable.columns.getItemAt(3).getRange().numberFormat = [['â‚¬#,##0.00']];
            expensesTable.getRange().format.autofitColumns();
            expensesTable.getRange().format.autofitRows();
            ``` 

    ## Test the add-in

    1. Open a Git bash window, or Node.JS-enabled system prompt, and navigate to the **Start** folder of the project.
    3. Run the command `npm run build` to transpile your ES6 source code to an earlier version of JavaScript that is supported by Internet Explorer (which is used under-the-hood by Excel to run Excel add-ins).
    4. Run the command `npm start` to start a web server running on localhost.   
    5. Sideload the add-in using one of the methods specified in [Excel add-in quickstart that uses jQuery](../quickstarts/excel-quickstart-jquery.md).
    6. On the **Home** menu, choose **Show Taskpane**.
    7. In the taskpane, choose **Create Table**.

        ![Excel tutorial - Create Table](../images/excel-tutorial-create-table.png)

- title: Filter and sort a table
  durationInMinutes: 10
  content: |
    This is the second step of a tutorial that begins with [Excel Tutorial Create Table](excel-tutorial-create-table.md). You need to complete the preceding steps to get the project in the state that this step assumes. 

    This tutorial shows you how to programmatically filter and sort a table.

    ## Filter the table

    1. Open the project in your code editor. 
    2. Open the file index.html.
    3. Just below the `div` that contains the `create-table` button, add the following markup:

        ```html
        <div class="padding">            
            <button class="ms-Button" id="filter-table">Filter Table</button>            
        </div>
        ```

    4. Open the app.js file.

    5. Just below the line that assigns a click handler to the `create-table` button, add the following code:

        ```js
        $('#filter-table').click(filterTable);
        ```

    6. Just below the `createTable` function add the following function:

        ```js
        function filterTable() {
            Excel.run(function (context) {
                
                // TODO1: Queue commands to filter out all expense categories except 
                //        Groceries and Education.

                return context.sync();
            })
            .catch(function (error) {
                console.log("Error: " + error);
                if (error instanceof OfficeExtension.Error) {
                    console.log("Debug info: " + JSON.stringify(error.debugInfo));
                }
            });
        }
        ``` 

    7. Replace `TODO1` with the following code. Note:
      - The code first gets a reference to the column that needs filtering by passing the column name to the `getItem` method, instead of passing its index to the `getItemAt` method as the `createTable` method does. Since users can move table columns, the column at a given index might change after the table is created. Hence, it is safer to use the column name to get a reference to the column. We used `getItemAt` safely in the preceding tutorial, because we used it in the very same method that creates the table, so there is no chance that a user has moved the column.
      - The `applyValuesFilter` method is one of several filtering methods on the `Filter` object.

        ```js
        const currentWorksheet = context.workbook.worksheets.getActiveWorksheet();
        const expensesTable = currentWorksheet.tables.getItem('ExpensesTable');
        const categoryFilter = expensesTable.columns.getItem('Category').filter;
        categoryFilter.applyValuesFilter(["Education", "Groceries"]);
        ``` 

    ## Sort the table

    1. Open the file index.html.
    2. Below the `div` that contains the `filter-table` button, add the following markup:

        ```html
        <div class="padding">            
            <button class="ms-Button" id="sort-table">Sort Table</button>            
        </div>
        ```

    3. Open the app.js file.

    4. Below the line that assigns a click handler to the `filter-table` button, add the following code:

        ```js
        $('#sort-table').click(sortTable);
        ```

    5. Below the `filterTable` function add the following function.

        ```js
        function sortTable() {
            Excel.run(function (context) {
                
                // TODO1: Queue commands to sort the table by Merchant name.

                return context.sync();
            })
            .catch(function (error) {
                console.log("Error: " + error);
                if (error instanceof OfficeExtension.Error) {
                    console.log("Debug info: " + JSON.stringify(error.debugInfo));
                }
            });
        }
        ``` 

    7. Replace `TODO1` with the following code. Note:
      - The code creates an array of `SortField` objects which has just one member since the add-in only sorts on the Merchant column.
      - The `key` property of a `SortField` object is the zero-based index of the column to sort-on.
      - The `sort` member of a `Table` is a `TableSort` object, not a method. The `SortField`s are passed the `TableSort` object's `apply` method.

        ```js
        const currentWorksheet = context.workbook.worksheets.getActiveWorksheet();
        const expensesTable = currentWorksheet.tables.getItem('ExpensesTable');
        const sortFields = [
            { 
                key: 1,            // Merchant column
                ascending: false,
            }
        ];

        expensesTable.sort.apply(sortFields);
        ``` 

    ## Test the add-in

    1. Open a Git bash window, or Node.JS-enabled system prompt, and navigate to the **Start** folder of the project.
    2. Run the command `npm run build` to transpile your ES6 source code to an earlier version of JavaScript that is supported by Internet Explorer (which is used under-the-hood by Excel to run Excel add-ins).
    3. Run the command `npm start` to start a web server running on localhost.
    4. Sideload the add-in using one of the methods described in [Excel add-in quickstart that uses jQuery](../quickstarts/excel-quickstart-jquery.md).
    5. On the **Home** menu, select **Show Taskpane**.
    6. In the taskpane, choose **Create Table**. 
    7. Choose the **Filter Table** and **Sort Table** buttons, in either order.

        ![Excel tutorial - Filter and Sort Table](../images/excel-tutorial-filter-and-sort-table.png)

- title: Create a chart
  durationInMinutes: 10
  content: |
    This is the third step of a tutorial that begins with [Excel Tutorial Create Table](excel-tutorial-create-table.md). You need to complete the preceding steps to get the project in the state that this step assumes. 

    In this tutorial, you'll learn how to programmatically create a chart from table data and how to format the chart. 

    ## Chart table data

    1. Open the project in your code editor. 
    2. Open the file index.html.
    3. Below the `div` that contains the `sort-table` button, add the following markup:

        ```html
        <div class="padding">            
            <button class="ms-Button" id="create-chart">Create Chart</button>            
        </div>
        ```

    4. Open the app.js file.

    5. Below the line that assigns a click handler to the `sort-chart` button, add the following code:

        ```js
        $('#create-chart').click(createChart);
        ```

    6. Below the `sortTable` function add the following function.

        ```js
        function createChart() {
            Excel.run(function (context) {
                
                // TODO1: Queue commands to get the range of data to be charted.

                // TODO2: Queue command to create the chart and define its type.

                // TODO3: Queue commands to position and format the chart.

                return context.sync();
            })
            .catch(function (error) {
                console.log("Error: " + error);
                if (error instanceof OfficeExtension.Error) {
                    console.log("Debug info: " + JSON.stringify(error.debugInfo));
                }
            });
        }
        ``` 

    7. Replace `TODO1` with the following code. Note that in order to exclude the header row, the code uses the `Table.getDataBodyRange` method to get the range of data you want to chart instead of the `getRange` method.

        ```js
        const currentWorksheet = context.workbook.worksheets.getActiveWorksheet();
        const expensesTable = currentWorksheet.tables.getItem('ExpensesTable');
        const dataRange = expensesTable.getDataBodyRange();
        ``` 

    8. Replace `TODO2` with the following code. Note the following parameters:
      - The first parameter to the `add` method specifies the type of chart. There are several dozen types. 
      - The second parameter specifies the range of data to include in the chart. 
      - The third parameter determines whether a series of data points from the table should be charted rowwise or columnwise. The option `auto` tells Excel to decide the best method.

        ```js
        let chart = currentWorksheet.charts.add('ColumnClustered', dataRange, 'auto');
        ``` 

    9. Replace `TODO3` with the following code. Most of this code is self-explanatory. Note:
      - The parameters to the `setPosition` method specify the upper left and lower right cells of the worksheet area that should contain the chart. Excel can adjust things like line width to make the chart look good in the space it has been given.
      - A "series" is a set of data points from a column of the table. Since there is only one non-string column in the table, Excel infers that the column is the only column of data points to chart. It interprets the other columns as chart labels. So there will be just one series in the chart and it will have index 0. This is the one to label with "Value in â‚¬". 

        ```js
        chart.setPosition("A15", "F30");
        chart.title.text = "Expenses";
        chart.legend.position = "right"
        chart.legend.format.fill.setSolidColor("white");
        chart.dataLabels.format.font.size = 15;
        chart.dataLabels.format.font.color = "black";
        chart.series.getItemAt(0).name = 'Value in â‚¬';
        ``` 

    ## Test the add-in

    1. Open a Git bash window, or Node.JS-enabled system prompt, and navigate to the **Start** folder of the project.
    3. Run the command `npm run build` to transpile your ES6 source code to an earlier version of JavaScript that is supported by Internet Explorer (which is used by Excel to run Excel add-ins).
    4. Run the command `npm start` to start a web server running on localhost.
    5. Sideload the add-in using one of the methods described in [Excel add-in quickstart that uses jQuery](../quickstarts/excel-quickstart-jquery.md).
    6. On the **Home** menu, select **Show Taskpane**.
    7. In the taskpane, choose **Create Table**. 
    8. Choose the **Filter Table** and **Sort Table** buttons, in either order.
    9. Choose the **Create Chart** button. A chart is created and only the data from the rows that have been filtered are included. The labels on the data points across the bottom are in the sort order of the chart; that is, merchant names in reverse alphabetical order.

        ![Excel tutorial - Create Chart](../images/excel-tutorial-create-chart.png)

- title: Freeze a table header
  durationInMinutes: 10
  content: |
    This is the fourth step of a tutorial that begins with [Excel Tutorial Create Table](excel-tutorial-create-table.md). You need to complete the preceding steps to get the project in the state that this step assumes. 

    When a table is long enough that a user must scroll to see some rows, the header row can scroll out of sight. In this tutorial, you learn how to freeze a row so that it remains visible even if the user scrolls a great deal. 

    ## Freeze the table's header row

    1. Open the project in your code editor. 
    2. Open the file index.html.
    3. Below the `div` that contains the `create-chart` button, add the following markup:

        ```html
        <div class="padding">            
            <button class="ms-Button" id="freeze-header">Freeze Header</button>            
        </div>
        ```

    4. Open the app.js file.

    5. Below the line that assigns a click handler to the `create-chart` button, add the following code:

        ```js
        $('#freeze-header').click(freezeHeader);
        ```

    6. Below the `createChart` function add the following function:

        ```js
        function freezeHeader() {
            Excel.run(function (context) {
                
                // TODO1: Queue commands to keep the header visible when the user scrolls.

                return context.sync();
            })
            .catch(function (error) {
                console.log("Error: " + error);
                if (error instanceof OfficeExtension.Error) {
                    console.log("Debug info: " + JSON.stringify(error.debugInfo));
                }
            });
        }
        ``` 

    7. Replace `TODO1` with the following code. Note:
      - The `Worksheet.freezePanes` collection is a set of panes in the worksheet that are pinned, or frozen, in place when the worksheet is scrolled.
      - The `freezeRows` method takes as a parameter the number of rows, from the top that are to be pinned in place. We pass `1`

        ```js
        const currentWorksheet = context.workbook.worksheets.getActiveWorksheet();
        currentWorksheet.freezePanes.freezeRows(1);
        ``` 

    ## Test the add-in

    1. Open a Git bash window, or Node.JS-enabled system prompt, and navigate to the **Start** folder of the project.
    2. Run the command `npm run build` to transpile your ES6 source code to an earlier version of JavaScript that is supported by Internet Explorer (which is used under-the-hood by Excel to run Excel add-ins).
    3. Run the command `npm start` to start a web server running on localhost.
    4. Sideload the add-in using one of the methods described in [Excel add-in quickstart that uses jQuery](../quickstarts/excel-quickstart-jquery.md).
    5. On the **Home** menu, choose **Show Taskpane**.
    6. In the taskpane, choose **Create Table**. 
    7. Choose the **Freeze Header** button.
    8. Scroll the worksheet enough to to see that the table header remains visible at the top even when the higher rows scroll out of sight.

        ![Excel tutorial - Freeze Header](../images/excel-tutorial-freeze-header.png)

- title: Protect a worksheet
  durationInMinutes: 10
  content: |
    This is the fifth step of a tutorial that begins with [Excel Tutorial Create Table](excel-tutorial-create-table.md). You need to complete the preceding steps to get the project in the state that this step assumes. 

    ## Configure the manifest to add a second ribbon button

    1. Open the manifest file **my-office-add-in-manifest.xml**.
    2. Find the `<Control>` element. This element defines the **Home** ribbon button you have been using to launch the add-in. We're going to add a second button to the same group on the **Home** ribbon. In between the end Control tag (`</Control>`) and the end Group tag (`</Group>`), add the following markup.

        ```xml
        <Control xsi:type="Button" id="<!--TODO1: Unique (in manifest) name for button -->">
            <Label resid="<!--TODO2: Button label -->" />
            <Supertip>            
                <Title resid="<!-- TODO3: Button tool tip title -->" />
                <Description resid="<!-- TODO4: Button tool tip description -->" />
            </Supertip>
            <Icon>
                <bt:Image size="16" resid="Contoso.tpicon_16x16" />
                <bt:Image size="32" resid="Contoso.tpicon_32x32" />
                <bt:Image size="80" resid="Contoso.tpicon_80x80" />
            </Icon>
            <Action xsi:type="<!-- TODO5: Specify the type of action-->">
                <!-- TODO6: Identify the function.-->
            </Action>
        </Control>
        ```

    3. Replace `TODO1` with a string that gives the button an ID that is unique within this manifest file. There's only one other button in the manifest, so this isn't difficult. Since our button is going to toggle protection of the worksheet on and off, use "ToggleProtection". When you are done, the entire start Control tag should look like the following:

        ```xml
        <Control xsi:type="Button" id="ToggleProtection">
        ```

    4. The next three `TODO`s set "resid"s, which is short for resource ID. A resource is a string, and you'll create these three strings in a later step. For now, you need to give IDs to the resources. The button label should read "Toggle Protection", but the *ID* of this string should be "ProtectionButtonLabel", so the completed `Label` element should look like the following code:

        ```xml
        <Label resid="ProtectionButtonLabel" />
        ```

    5. The `SuperTip` element defines the tool tip for the button. The tool tip title should be the same as the button label, so we use the very same resource ID: "ProtectionButtonLabel". The tool tip description will be "Click to turn protection of the worksheet on and off". But the `ID` should be "ProtectionButtonToolTip". So, when you are done, the whole `SuperTip` markup should look like the following code: 

        ```xml
        <Supertip>            
            <Title resid="ProtectionButtonLabel" />
            <Description resid="ProtectionButtonToolTip" />
        </Supertip>
        ```

      > [!NOTE] 
      > In a production add-in, you would not want to use the same icon for two different buttons; but to simplify this tutorial, we'll do that. So the `Icon` markup in our new `Control` is just a copy of the `Icon` element from the existing `Control`. 

    6. The `Action` element inside the original `Control` element that was already present in the manifest, has its type set to `ShowTaskpane`, but our new button isn't going to open a task pane; it's going to run a custom function that you create in a later step. So replace `TODO5` with `ExecuteFunction` which is the action type for buttons that trigger custom functions. The start `Action` tag should look like the following code:
    
        ```xml
        <Action xsi:type="ExecuteFunction">
        ```

    7. The original `Action` element has child elements that specify a task pane ID and a URL of the page that should be opened in the task pane. But an `Action` element of the `ExecuteFunction` type has a single child element that names the function that the control executes. You'll create that function in a later step, and it will be called `toggleProtection`. So, replace `TODO6` with the following markup:
    
        ```xml
        <FunctionName>toggleProtection</FunctionName>
        ```

        The entire `Control` markup should now look like the following:

        ```xml
        <Control xsi:type="Button" id="ToggleProtection">
            <Label resid="ProtectionButtonLabel" />
            <Supertip>            
                <Title resid="ProtectionButtonLabel" />
                <Description resid="ProtectionButtonToolTip" />
            </Supertip>
            <Icon>
                <bt:Image size="16" resid="Contoso.tpicon_16x16" />
                <bt:Image size="32" resid="Contoso.tpicon_32x32" />
                <bt:Image size="80" resid="Contoso.tpicon_80x80" />
            </Icon>
            <Action xsi:type="ExecuteFunction">
              <FunctionName>toggleProtection</FunctionName>
            </Action>
        </Control>
        ```

    8. Scroll down to the `Resources` section of the manifest.

    9. Add the following markup as a child of the `bt:ShortStrings` element.

        ```xml
        <bt:String id="ProtectionButtonLabel" DefaultValue="Toggle Worksheet Protection" />
        ```

    10. Add the following markup as a child of the `bt:LongStrings` element.

        ```xml
        <bt:String id="ProtectionButtonToolTip" DefaultValue="Click to protect or unprotect the current worksheet." />
        ```

    11. Be sure to save the file.

    ## Create the function that protects the sheet

    1. Open the file \function-file\function-file.js.

    2. The file already has an Immediately Invoked Function Expression (IFFE). No custom initialization logic is needed, so leave the function that is assigned to `Office.initialize` with an empty body. (But do not delete it. The `Office.initialize` property cannot be null or undefined.) *Outside of the IIFE*, add the following code. Note that we specify an `args` parameter to the method and the very last line of the method calls `args.completed`. This is a requirement for all add-in commands of type **ExecuteFunction**. It signals the Office host application that the function has finished and the UI can become responsive again.

        ```javascript
        function toggleProtection(args) {
            Excel.run(function (context) {
                
                // TODO1: Queue commands to reverse the protection status of the current worksheet.

                return context.sync();
            })
            .catch(function (error) {
                console.log("Error: " + error);
                if (error instanceof OfficeExtension.Error) {
                    console.log("Debug info: " + JSON.stringify(error.debugInfo));
                }
            });
        args.completed();
        }
        ```

    3. Replace TODO1 with the following code. This code uses the worksheet object's protection property in a standard toggle pattern. The `TODO2` will be explained in the next section.

        ```javascript
        const sheet = context.workbook.worksheets.getActiveWorksheet();

        // TODO2: Queue command to load the sheet's "protection.protected" property from
        //        the document and re-synchronize the document and task pane.

        if (sheet.protection.protected) {
            sheet.protection.unprotect();
        } else {
            sheet.protection.protect();
        }
        ``` 

    ## Add code to fetch document properties into the task pane's script objects

    In all the earlier functions in this series of tutorials, you queued commands to *write* to the Office document. Each function ended with a call to the `context.sync()` method which sends the queued commands to the document to be executed. But the code you added in the last step calls the `sheet.protection.protected` property, and this is a significant difference from the earlier functions you wrote, because the `sheet` object is only a proxy object that exists in your task pane's script. It doesn't know what the actual protection state of the document is, so it's `protection.protected` property can't have a real value. It is necessary to first fetch the protection status from the document and use it set the value of `sheet.protection.protected`. Only then can `sheet.protection.protected` be called without causing an exception to be thrown. This fetching process has three steps:

      1. Queue a command to load (that is; fetch) the properties that your code needs to read.
      2. Call the context object's `sync` method to send the queued command to the document for execution and return the requested information.
      3. Because the `sync` method is asynchronous, ensure that it has completed before your code calls the properties that were fetched.

    These steps must be completed whenever your code needs to *read* information from the Office document.

    1. In the `toggleProtection` method, replace `TODO2` with the following code. Note:
      - Every Excel object has a `load` method. You specify the properties of the object that you want to read in the parameter as a string of comma-delimited names. In this case, the property you need to read is a subproperty of the `protection` property. You reference the subproperty almost exactly as you would anywhere else in your code, with the exception that you use a forward slash ('/') character instead of a "." character.
      - To ensure that the toggle logic, which reads `sheet.protection.protected`, does not run until after the `sync` is complete and the `sheet.protection.protected` has been assigned the correct value that is fetched from the document, it will be moved (in the next step) into a `then` function that won't run until the `sync` has completed. 

        ```javascript
        sheet.load('protection/protected');
        return context.sync()
            .then(
                function() {
                    // TODO3: Move the queued toggle logic here.
                }
            )
            // TODO4: Move the final call of `context.sync` here and ensure that it
            //        does not run until the toggle logic has been queued.
        ``` 

    2. You can't have two `return` statements in the same unbranching code path, so delete the final line `return context.sync();` at the end of the `Excel.run`. You will add a new final `context.sync`, in a later step.
    3. Cut the `if ... else` structure in the `toggleProtection` method and paste it in place of `TODO3`.
    4. Replace `TODO4` with the following code. Note:
      - Passing the `sync` method to a `then` function ensures that it does not run until either `sheet.protection.unprotect()` or `sheet.protection.protect()` has been queued.
      - The `then` method invokes whatever function is passed to it, and you don't want `sync` to be invoked twice, so leave off the "()" from the end of `context.sync`.

        ```javascript
        .then(context.sync);
        ```

      When you are done, the entire function should look like the following:

        ```javascript
        function toggleProtection(args) {
            Excel.run(function (context) {            
              const sheet = context.workbook.worksheets.getActiveWorksheet();          
              sheet.load('protection/protected');

              return context.sync()
                  .then(
                      function() {
                        if (sheet.protection.protected) {
                            sheet.protection.unprotect();
                        } else {
                            sheet.protection.protect();
                        }
                      }
                  )
                  .then(context.sync);
            })
            .catch(function (error) {
                console.log("Error: " + error);
                if (error instanceof OfficeExtension.Error) {
                    console.log("Debug info: " + JSON.stringify(error.debugInfo));
                }
            });
            args.completed();
        }
        ```

    ## Configure the script-loading HTML file

    1. Open the /function-file/function-file.html file. This is a UI-less HTML file that is called when the user presses the **Toggle Worksheet Protection** button. Its purpose is to load the JavaScript method that should run when the button is pushed.
    2. There are two `<script>` tags in the file. The first one loads Office.js. Replace the **1** or **1.1** in the `src` attribute with **beta**.

      > [!NOTE]
      > The function-file.html file and the function-file.js file that it loads run in an entirely separate IE process from the add-in's task pane. If the function-file.js was transpiled into the same bundle.js file as the app.js file, then the add-in would have to load two copies of the bundle.js file, which defeats the purpose of bundling. In addition, the function-file.js file does not contain any JavaScript that is unsupported by IE. For these two reasons, this add-in does not transpile the function-file.js at all. 

    ## Test the add-in

    1. Open a Git Bash window, or Node.JS-enabled system prompt, and navigate to the **Start** folder of the project.
    3. Run the command `npm run build` to transpile your ES6 source code to an earlier version of JavaScript that is supported by Internet Explorer (which is used under-the-hood by Excel to run Excel add-ins).
    4. Run the command `npm start` to start a web server running on localhost.
    5. Sideload the add-in using one of the methods described in [Excel add-in quickstart that uses jQuery](../quickstarts/excel-quickstart-jquery.md).
    6. On the **Home** ribbon, choose **Toggle Worksheet Protection**. Note that most of the controls on the ribbon are disabled (and visually grayed-out) as seen in screenshot below. 
    7. Choose a cell as you would if you wanted to change its content. You get an error telling you that the worksheet is protected.
    8. Choose **Toggle Worksheet Protection** again, and the controls are reenabled, and you can change cell values again.

        ![Excel tutorial - Ribbon with Protection On](../images/excel-tutorial-ribbon-with-protection-on.png)

- content: |
    You've completed the Excel add-in tutorial. To learn more about building Excel add-ins, see <a href="~/excel/excel-add-ins-overview">Excel add-ins overview</a>.